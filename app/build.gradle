import groovy.xml.MarkupBuilder
apply plugin: 'com.android.application'
apply plugin: 'commbuildsrc'

android {
    // rootProject 写不写都可以 子工程会继承父工程的属性
    compileSdkVersion 29 // this.rootProject.compileSdkVersion
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.fanqilong.gradleexercise"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs'] // 修改so库的存放位置
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res','src/main/res-ad','src/main/res-player'] // 设置资源文件文件夹
        }
    }
}


// 为应用程序添加第三方依赖
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}


//def getParentProject() {
//    // 获取父project
//    def name = getParent().name
//    println "the parent project name is : ${name}"
//}
//
//getParentProject()

//=======文件拷贝======
//copy {
//    from file('app.iml')
//    into getRootProject().getBuildDir()
//}
//========拷贝文件夹========
//copy {
//    from file('build/outputs/apk/')
//    into getRootProject().getBuildDir().path + '/apk/'
//    //排除不需要拷贝的文件
//    exclude {}
//    // 文件重命名
//    rename {}
//}

//======对文件树进行遍历========
//fileTree('build/outputs/apk/'){ FileTree fileTree->
//        fileTree.visit {FileTreeElement element->
//            println "the file name is :  ${element.file.name}"
//            copy {
//                from element.file
//                into getRootProject().getBuildDir().path + '/test/'
//            }
//        }
//}

// =========gradle执行外部命令============
//task apkcopy(description: "外部拷贝命令") {
//    doLast {
//        // gradle 执行阶段执行
//        def sourcePath = this.buildDir.path + "/outputs/apk"
//        if (isWindows()) {
//            sourcePath = this.buildDir.path + "\\outputs\\apk"
//        }
//        def destPath = "D:\\test"
//        def command = "mv -f ${sourcePath} ${destPath}"
//        if (isWindows()) {
//            command = "xcopy ${sourcePath} ${destPath} /s /e /Y"
//            //command = "move ${sourcePath} ${destPath}"
//        }
//        // exec块代码基本是固定的
//        println "执行的命令---->${command}"
//        exec {
//            try {
//                executable isWindows() ? 'cmd' : 'bash'
//                args isWindows() ? '/c' : '-c', command
//                println 'the command is executed success.'
//            } catch (GradleException e) {
//                println 'the command is executed failed.'
//            }
//        }
//    }
//}

static def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

//task genCode(type:Exec, description:"Windows生成Java代码") {
//    commandLine  "cmd", "/c", "java -jar swagger-codegen-cli.jar generate -i data/swagger.json -l jaxrs-resteasy -o ./sms-java"
//
//    println "generate java code success"
//}
//
//task genCodeOnLinux(type: Exec, description:"Linux环境生成Java代码") {
//    executable "sh"
//    args "-c", "java  -jar swagger-codegen-cli.jar generate -i data/swagger.json -l jaxrs-resteasy -o ./sms-java"
//
//    println "generate java code success"
//}


//===============gradle task====================//
//=====task 创建和配置=====//
// task配置参数
//    String TASK_NAME = "name"; //task名字
//
//    String TASK_DESCRIPTION = "description"; //task描述
//
//    String TASK_GROUP = "group"; //分组
//
//    String TASK_TYPE = "type"; //task类型
//
//    String TASK_DEPENDS_ON = "dependsOn"; //依赖
//
//    String TASK_OVERWRITE = "overwrite"; // 重写
//
//    String TASK_ACTION = "action"; // 配置task执行逻辑

// task 第一种创建方式 直接通过task函数去创建
task helloTask(group: 'hello', description: 'task study') {
    println 'I am helloTask' // I am helloTask
}

// 通过TaskContainer创建Task
this.tasks.create(name: 'helloTask2', group: 'hello', description: 'task study') {
    println 'I am helloTask2' // I am helloTask2
}


//=====task 执行=====//
task execTask(group: 'execTask', description: 'task 执行') {
    println 'I am execTask'
    doFirst {
        // 后执行 相对于闭包外的
        println 'execTask doFirst --> group is: ' + group
    }
}

execTask.doFirst {
    // 先执行 相对闭包内的
    println 'execTask doFirst --> description is: ' + description
}
// 计算build 时长的功能
def startBuildTime, endbuildTime

this.afterEvaluate { Project project ->
    // 保证要找的task已经配置完毕
    def preBuildTask = project.tasks.getByName('preBuild')
    preBuildTask.doFirst {
        startBuildTime = System.currentTimeMillis()
        println "this start time is : ${startBuildTime}"
    }
    def buildTask = project.tasks.getByName('build')
    buildTask.doLast {
        endbuildTime = System.currentTimeMillis()
        println "构建的时间是: ${endbuildTime - startBuildTime}"
    }
}

//=====task 依赖详解=====//

//  << 等价于 doLast   << 在gradle 在5.1 之后废弃了
task lib1 {
    doLast {
        println 'lib1'
    }
}

task lib2 {
    doLast {
        println 'lib2'
    }
}

task noLib {
    doLast {
        println 'noLib'
    }
}

task taskX {
    doLast {
        println 'taskX'
    }
}

task taskY {
    doLast {
        println 'taskY'
    }
}

// dependsOn 指定依赖的task
// 执行当前task 会先执行依赖的task
task taskZ/*(dependsOn: [taskX, taskY])*/ {
    dependsOn this.tasks.findAll { task ->
        // 返回所有lib开头的task
        println task.name
        return task.name.startsWith('lib')
    }
    doLast {
        println 'taskZ'
    }
}
// taskZ.dependsOn(taskX, taskY) 与上面的方法下过一样


task handleReleaseFile {
    def srcFile = file('releases.xml')
    def destDir = new File(this.buildDir, 'generated/release/')
    doLast {
        println '开始解析对应的xml文件'
        destDir.mkdir()
        def releases = new XmlParser().parse(srcFile)
        releases.release.each { releaseNode ->
            // 解析每一个release节点的内容
            def versionName = releaseNode.versionName.text()
            def versionCode = releaseNode.versionCode.text()
            def versionInfo = releaseNode.versionInfo.text()
            // 创建文件并 写入节点数据
            def destFile = new File(destDir, "relase-${versionName}.text")
            // 写入文件 同时设置 字符集
            destFile.withWriter('UTF-8') { writer ->
                writer.write("${versionName}->${versionCode}->${versionInfo}")
            }
        }
    }
}

task handleReleaseFileTest(dependsOn: handleReleaseFile) {
    def dir = fileTree(this.buildDir.path + 'generated/release/')
    doLast {
        dir.each {
            println 'the file name is: ' + it
        }
        println '输出完成...'
    }
}

//==================task 输入输出详解=====================//
ext {
    versionName = "1.0.0"
    versionCode = "100"
    versionInfo = "App的第1个版本，上线了一些最基础核心的功能."
    destFile = file('releases.xml')
    if (destFile != null && !destFile.exists()) {
        destFile.createNewFile()
    }
}
//task writeTask { TaskInputs inputs, TaskOutputs outputs ->
//    // 为task 指定输入
//    inputs.property('versionName', this.versionName)
//    inputs.property('versionCode', this.versionCode)
//    inputs.property('versionInfo', this.versionInfo)
//    // 为task指定输出
//    outputs.file destFile
//
//    doLast {
//        def data = inputs.getProperties()
//        File file = outputs.getFiles().getSingleFile()
//        // 将map转化成实体对象
//        def versionMsg = new VersionMsg(data)
//        def sw = new StringWriter()
//        def xmlBuilder = new MarkupBuilder(sw)
//        if (file.text !=null && file.text.size()<=0){
//            // 文件中没有内容
//        }
//    }
//}
// class  VersionMsg{
//     String versionName
//     String versionCode
//     String versionInfo
// }

//==============插件传递参数=================//
commBuildSrc {
    versionCode rootProject.ext.android.versionCode
    versionName rootProject.ext.android.versionName
    vsersionInfo '---vsersionInfo---'
    fileName 'releases.xml'
}